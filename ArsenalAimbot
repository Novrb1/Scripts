local library = loadstring(game:HttpGet("https://raw.githubusercontent.com/Novrb1/Scripts/master/UILIB-not-mine"))()
library:SetBind(Enum.KeyCode.RightShift)
local Players = game:GetService("Players")
local lp = Players.LocalPlayer
local cam = game.workspace.CurrentCamera
local mouse = lp:GetMouse()
local Settings = {
    silent_aimbot = false,
    show_fov = false,
    NumSides = 4,
    visionly = false,
    fov_value = 10,
    fov_thickness = 1,
    aimpart = "HeadHB"
}
local a = library:NewWindow("Arsenal","UI")
local aim_tab = a:NewSection("Aimbot")
aim_tab:Toggle("Silent Aimbot", function(bool)
    Settings.silent_aimbot = bool
end)
aim_tab:Toggle("Visible Only", function(bool)
    Settings.visionly = bool
end)
aim_tab:Drop("Aim Part", {"HeadHB", "UpperTorso", "LowerTorso"}, function(thing)
    Settings.aimpart = thing
end)
aim_tab:Slider("Field Of View", 10, 500, function(val)
    Settings.fov_value = tonumber(val);
end)
aim_tab:Toggle("Show FOV", function(bool)
    Settings.show_fov = bool
end)
aim_tab:Slider("Thickness", 1, 10, function(val)
    Settings.fov_thickness = tonumber(val);
end)
aim_tab:Slider("Number Of Sides", 4, 100, function(val)
    Settings.NumSides = tonumber(val);
end)
local FOVCircle = Drawing.new("Circle")
FOVCircle.Visible = true
mouse.Move:Connect(function()
    if Settings.show_fov then
        FOVCircle.Thickness = Settings.fov_thickness;
        FOVCircle.Radius = Settings.fov_value;
        FOVCircle.NumSides = Settings.NumSides
        FOVCircle.Color = Color3.fromRGB(0, 125, 255);
        FOVCircle.Position = Vector2.new(mouse.X, mouse.Y + 36)
        FOVCircle.Transparency = 1
    else
        FOVCircle.Transparency = 0
    end
end)
function getClosestMouse()
    local nearest = nil
    local last = math.huge
    for i,v in pairs(Players:GetPlayers()) do
        if v ~= lp and lp.Character and v.Character and v.Character:FindFirstChild("Head") and v.TeamColor ~= lp.TeamColor then
            local ePos = cam:WorldToViewportPoint(v.Character:FindFirstChild("Head").Position)
            local AccPos = Vector2.new(ePos.x, ePos.y)
            local mousePos = Vector2.new(mouse.X, mouse.Y)
            local distance = (AccPos - mousePos).magnitude
            if distance < last then
                last = distance
                nearest = v
            end
        end
    end
    if nearest ~= nil then
        return nearest
    end
end
function checkfov(plr, fov_amount)
    local fov
    local vector = workspace.CurrentCamera:WorldToViewportPoint(plr.Character.HumanoidRootPart.Position)
    local magnitude = (Vector2.new(vector.X, vector.Y) - Vector2.new(mouse.X, mouse.Y)).magnitude
    local cfov = fov_amount
    if magnitude < cfov then
        fov = true
    else
        fov = false
    end
    return fov
end
function visible(person)
    return not next(cam.GetPartsObscuringTarget(cam, {cam.CFrame.Position, person.Character:FindFirstChild("Head").Position}, {lp.Character, person.Character}));
end
spawn(function()
    local OldCall
    OldCall = hookmetamethod(game, "__namecall", function(self, ...) -- 1st is game of course 2nd you can do __namecall __index __newindex
        local Method = getnamecallmethod()
        local Args = {...}
        if Method == "FireServer" and tostring(self) == "HitPart" then
            if Settings.silent_aimbot then
                local getclose = getClosestMouse()
                if getclose and checkfov(getclose, Settings.fov_value) then
                    if Settings.visionly then
                        if visible(getclose) then
                            Args[1] = getclose.Character:FindFirstChild(Settings.aimpart)
                            return self.FireServer(self, unpack(Args))
                        end
                    else
                        Args[1] = getclose.Character:FindFirstChild(Settings.aimpart)
                        return self.FireServer(self, unpack(Args))
                    end
                else
                    return self.FireServer(self, unpack(Args))
                end
            end
        end
        return OldCall(self, ...)
    end)
end)
